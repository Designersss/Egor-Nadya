'use server';

interface TelegramResponse {
    ok: boolean;
    result?: never;
    description?: string;
}

interface RecaptchaResponse {
    success: boolean;
    score?: number;
    action?: string;
}

export async function sendToTelegram(formData: {
    fio: string;
    presence: string;
    secondDay: string;
    children: string;
    wishes: string;
    recaptchaToken: string;
}) {
    const { fio, presence, secondDay, children, wishes, recaptchaToken } = formData;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è reCAPTCHA
    const recaptchaSecret = process.env.RECAPTCHA_SECRET_KEY;

    if (!recaptchaSecret) {
        return { success: false, error: 'Server configuration error' };
    }

    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ reCAPTCHA
        const recaptchaResponse = await fetch('https://www.google.com/recaptcha/api/siteverify', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: `secret=${recaptchaSecret}&response=${recaptchaToken}`,
        });

        const recaptchaData: RecaptchaResponse = await recaptchaResponse.json();

        if (!recaptchaData.success || (recaptchaData.score && recaptchaData.score < 0.5)) {
            return { success: false, error: 'reCAPTCHA verification failed' };
        }
    } catch (error) {
        return { success: false, error: 'reCAPTCHA verification error' };
    }

    const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
    const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;

    if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
        return { success: false, error: 'Server configuration error' };
    }

    const message = `
üéâ *–ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ–ø—Ä–æ—Å!*

üë§ *–§–ò–û:* ${fio}

‚úÖ *–ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ:* ${getPresenceText(presence)}
üìÖ *–í—Ç–æ—Ä–æ–π –¥–µ–Ω—å:* ${getSecondDayText(secondDay)}
üë∂ *–î–µ—Ç–∏:* ${getChildrenText(children)}
üí≠ *–ü–æ–∂–µ–ª–∞–Ω–∏—è:* ${wishes || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
  `.trim();

    try {
        const response = await fetch(
            `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`,
            {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    chat_id: TELEGRAM_CHAT_ID,
                    text: message,
                    parse_mode: 'Markdown',
                }),
            }
        );

        const data: TelegramResponse = await response.json();

        if (data.ok) {
            return { success: true };
        } else {
            return { success: false, error: data.description };
        }
    } catch (error) {
        return { success: false, error: 'Network error' };
    }
}

function getPresenceText(value: string): string {
    const map: Record<string, string> = {
        'yes': '–î–∞, —Å –±–æ–ª—å—à–∏–º —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º!',
        'no': '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —Å–º–æ–≥—É –±—ã—Ç—å.'
    };
    return map[value] || value;
}

function getSecondDayText(value: string): string {
    const map: Record<string, string> = {
        'yes-definitely': '–î–∞, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!',
        'no': '–ù–µ—Ç, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è'
    };
    return map[value] || value;
}

function getChildrenText(value: string): string {
    const map: Record<string, string> = {
        'no-children': '–ù–µ—Ç, –±–µ–∑ –¥–µ—Ç–µ–π',
        'with-children': '–î–∞, –±—É–¥–µ–º –≤–º–µ—Å—Ç–µ —Å —Ä–µ–±–µ–Ω–∫–æ–º'
    };
    return map[value] || value;
}