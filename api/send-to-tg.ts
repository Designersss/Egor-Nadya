'use server';

interface TelegramResponse {
    ok: boolean;
    result?: never;
    description?: string;
}

export async function sendToTelegram(formData: {
    fio: string;
    presence: string;
    companion: string;
    secondDay: string;
    children: string;
    wishes: string;
}) {
    const { fio, presence, companion, secondDay, children, wishes } = formData;

    const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
    const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;

    if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
        return { success: false, error: 'Server configuration error' };
    }

    const message = `
üéâ *–ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ–ø—Ä–æ—Å!*

üë§ *–§–ò–û:* ${fio}

‚úÖ *–ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ:* ${getPresenceText(presence)}
üë• *–°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ:* ${getCompanionText(companion)}
üìÖ *–í—Ç–æ—Ä–æ–π –¥–µ–Ω—å:* ${getSecondDayText(secondDay)}
üë∂ *–î–µ—Ç–∏:* ${getChildrenText(children)}
üí≠ *–ü–æ–∂–µ–ª–∞–Ω–∏—è:* ${wishes || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
  `.trim();

    try {
        const response = await fetch(
            `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`,
            {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    chat_id: TELEGRAM_CHAT_ID,
                    text: message,
                    parse_mode: 'Markdown',
                }),
            }
        );

        const data: TelegramResponse = await response.json();

        if (data.ok) {
            return { success: true };
        } else {
            return { success: false, error: data.description };
        }
    } catch (error) {
        return { success: false, error: 'Network error' };
    }
}

function getPresenceText(value: string): string {
    const map: Record<string, string> = {
        'yes': '–î–∞, —Å –±–æ–ª—å—à–∏–º —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º!',
        'no': '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —Å–º–æ–≥—É –±—ã—Ç—å.',
        'unsure': '–ü–æ–∫–∞ –Ω–µ —É–≤–µ—Ä–µ–Ω(–∞), —É—Ç–æ—á–Ω—é –ø–æ–∑–∂–µ'
    };
    return map[value] || value;
}

function getCompanionText(value: string): string {
    const map: Record<string, string> = {
        'alone': '–Ø –±—É–¥—É –æ–¥–∏–Ω/–æ–¥–Ω–∞',
        'couple': '–ú—ã –±—É–¥–µ–º –≤–¥–≤–æ–µ–º (—è + –º–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä/—Å–ø—É—Ç–Ω–∏–∫)',
        'unsure-companion': '–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–∫–∞'
    };
    return map[value] || value;
}

function getSecondDayText(value: string): string {
    const map: Record<string, string> = {
        'yes-definitely': '–î–∞, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!',
        'probably-yes': '–°–∫–æ—Ä–µ–µ –¥–∞, —á–µ–º –Ω–µ—Ç',
        'unsure-mood': '–ï—â–µ –Ω–µ –∑–Ω–∞—é, –ø–æ—Å–º–æ—Ç—Ä–∏–º –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é',
        'no': '–ù–µ—Ç, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è'
    };
    return map[value] || value;
}

function getChildrenText(value: string): string {
    const map: Record<string, string> = {
        'no-children': '–ù–µ—Ç, –±–µ–∑ –¥–µ—Ç–µ–π',
        'with-children': '–î–∞, –±—É–¥–µ–º –≤–º–µ—Å—Ç–µ —Å —Ä–µ–±–µ–Ω–∫–æ–º'
    };
    return map[value] || value;
}